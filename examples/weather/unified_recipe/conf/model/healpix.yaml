# SPDX-FileCopyrightText: Copyright (c) 2023 - 2024 NVIDIA CORPORATION & AFFILIATES.
# SPDX-FileCopyrightText: All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: HEALPixRecUNet
nr_input_channels: ${eval:'(${training.nr_input_steps} * (${curated_dataset.nr_predicted_variables} + ${curated_dataset.nr_unpredicted_variables}))'}
nr_output_channels: ${curated_dataset.nr_predicted_variables}
input_shape: ${transform.transformed_shape}

args:
  encoder:
    conv_block:
      activation:
        _target_: modulus.models.layers.activations.CappedGELU
        cap_value: 10
      _target_: modulus.models.dlwp_healpix_layers.healpix_blocks.ConvNeXtBlock
      _recursive_: true
      in_channels: 3
      out_channels: 1
      kernel_size: 3
      dilation: 1
      upscale_factor: 4
    down_sampling_block:
      _target_: modulus.models.dlwp_healpix_layers.healpix_blocks.AvgPool
      pooling: 2
    recurrent_block:
      _target_: modulus.models.dlwp_healpix_layers.healpix_blocks.ConvGRUBlock
      _recursive_: false
      in_channels: 3
      kernel_size: 1
    _target_: modulus.models.dlwp_healpix_layers.healpix_encoder.UNetEncoder
    _recursive_: false
    n_channels:
    - 136
    - 68
    - 34
    dilations:
    - 1
    - 2
    - 4
  decoder:
    conv_block:
      activation:
        _target_: modulus.models.layers.activations.CappedGELU
        cap_value: 10
      _target_: modulus.models.dlwp_healpix_layers.healpix_blocks.ConvNeXtBlock
      _recursive_: true
      in_channels: 3
      out_channels: 1
      kernel_size: 3
      dilation: 1
      upscale_factor: 4
    up_sampling_block:
      activation:
        _target_: modulus.models.layers.activations.CappedGELU
        cap_value: 10
      _target_: modulus.models.dlwp_healpix_layers.healpix_blocks.TransposedConvUpsample
      in_channels: 3
      out_channels: 1
      upsampling: 2
    recurrent_block:
      _target_: modulus.models.dlwp_healpix_layers.healpix_blocks.ConvGRUBlock
      _recursive_: false
      in_channels: 3
      kernel_size: 1
    output_layer:
      _target_: modulus.models.dlwp_healpix_layers.healpix_blocks.BasicConvBlock
      in_channels: 3
      out_channels: 2
      kernel_size: 1
      dilation: 1
      n_layers: 1
    _target_: modulus.models.dlwp_healpix_layers.healpix_decoder.UNetDecoder
    _recursive_: false
    n_channels:
    - 34
    - 68
    - 136
    dilations:
    - 4
    - 2
    - 1
  _target_: modulus.models.dlwp_healpix.HEALPixRecUNet
  _recursive_: false
  presteps: 1
  input_time_dim: 1
  output_time_dim: ${data.output_time_dim}
  delta_time: ${data.time_step}
  input_channels: 7
  output_channels: 7
  n_constants: 2
  decoder_input_channels: 1
  enable_nhwc: false
  enable_healpixpad: false

  inp_shape: ${model.input_shape}
  out_shape: ${model.input_shape}
  inp_chans: ${model.nr_input_channels}
  out_chans: ${model.nr_output_channels}
  model_grid_type: "equiangular"
  sht_grid_type: "legendre-gauss"
  filter_type: "linear"
  scale_factor: 3
  embed_dim: 384
  num_layers: 8
  complex_activation: "real"
  normalization_layer: "instance_norm"
  hard_thresholding_fraction: 1.0
  use_mlp: !!bool True
  mlp_ratio: 2
  separable: !!bool False
  operator_type: "dhconv"
  activation_function: "gelu"
  pos_embed: "none"
